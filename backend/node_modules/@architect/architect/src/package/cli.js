#!/usr/bin/env node
let waterfall = require('run-waterfall')
let readArc = require('../util/read-arc')
let inventory = require('../inventory')
/**
 * warning! prototype code for reading .arc and outputing a CloudFormation template
 *
 * idea here is you'd run `npx deploy --slow` to deploy the current arc app as CloudFormation stack
 *
 * notes:
 * - likely we'd want to support nested stacks but for now one stack is fine
 * - currently .arc can be create/destroyed cleanly but there is no 'prune' we need that for parity
 */
let template = {
  AWSTemplateFormatVersion: '2010-09-09', //oldschoo
  Description: 'generated by .arc',
  Resources: {}
}

  waterfall([
    function reads(callback) {
      let {arc, raw} = readArc()
      inventory(arc, raw, callback)
    },
    function munge(result, callback) {
      let template = {}
      let name = result.app
      let hasApis = result.restapis.length > 0
      if (hasApis) {

      }
    }
  ], console.log)
  // resources
  /*
    AWS::ApiGateway::Account
    AWS::ApiGateway::BasePathMapping
    AWS::ApiGateway::Deployment
    AWS::ApiGateway::GatewayResponse
    AWS::ApiGateway::Method
    AWS::ApiGateway::Resource
    AWS::ApiGateway::RestApi
    AWS::ApiGateway::Stage
    AWS::ApiGateway::DomainName

   maybe?
    AWS::ApiGateway::ClientCertificate
    */


