# NOTE: update this with your service name
service: voterGroup

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-voterGroups
  #  tableName2: ${self:custom.stage}-userVoterGroup
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #  environment: ${file(env.yml):${self:provider.stage}}

  #   These environment variables are made available to our functions
  #   under process.env.
  environment:
    tableName: ${self:custom.tableName}
  #    tableName2: ${self:custom.tableName2}

  iamRoleStatements:
  - Effect: Allow
    Action:
    - dynamodb:DescribeTable
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    - dynamodb:DeleteItem
    - dynamodb:BatchGetItem
    #    # Restrict our IAM role permissions to
    #    # the specific table for the stage
    Resource:
    - "Fn::GetAtt": [ VoterGroupsTable, Arn ]
    - Fn::Join:
      - "/"
      -
        - { "Fn::GetAtt": [VoterGroupsTable, Arn ] }
        - "index/*"
#    - "Fn::GetAtt": [ UserVoterGroupTable, Arn ]

functions:
  createVoterGroup:
    handler: createVoterGroup.main
    events:
    - http:
        path: createVoterGroup
        method: post
        cors: true
        authorizer: aws_iam

  getVoterGroups:
    handler: getVoterGroups.main
    events:
    - http:
        path: getVoterGroups
        method: post
        cors: true
        authorizer: aws_iam

  addVoterToGroup:
    handler: addVoterToGroup.main
    events:
    - http:
        path: addVoterToGroup
        method: post
        cors: true
        authorizer: aws_iam

  updateVoterGroup:
    handler: updateVoterGroup.main
    events:
    - http:
        path: updateVoterGroup
        method: post
        cors: true
        authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
# API Gateway Errors
- ${file(resources/api-gateway-errors.yml)}
# DynamoDB
- ${file(resources/dynamodb-table.yml)}
